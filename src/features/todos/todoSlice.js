// Import the `createSlice` function from `@reduxjs/toolkit`.
// `createSlice` is a utility function that simplifies the process of creating Redux slices.
// A slice includes the reducer logic and actions related to a specific piece of state.
import { createSlice } from "@reduxjs/toolkit";

// Create a Redux slice named "todos" with initial state and reducers.
// A slice represents a specific part of the Redux state and the logic to update it.
// It consists of the state, reducers (functions to handle actions), and action creators.
export const todoSlice = createSlice({
  // Define the name of the slice. This name is used to generate action types and helps identify the slice.
  name: "todos",

  // Define the initial state for the slice.
  // This state represents the initial values of the properties related to todos.
  initialState: {
    newTodo: "", // Holds the description of the new todo item being added or edited.
    status: false, // Represents the status of the todo item (e.g., whether it's completed or not).
    isEditing: false, // Indicates whether the user is currently editing a todo item.
    isEditingId: "", // Stores the ID of the todo item being edited, if any.
  },

  // Define the reducers for the slice.
  // Reducers are functions that handle state updates based on dispatched actions.
  reducers: {
    // Define the `setNewTodo` reducer to update the `newTodo` property in the state.
    // This function takes the current `state` and an `action` object with a `payload` to set the new todo value.
    setNewTodo: (state, action) => {
      state.newTodo = action.payload; // Update `newTodo` with the new value from `action.payload`.
    },

    // Define the `setStatus` reducer to update the `status` property in the state.
    // This function takes the current `state` and an `action` object with a `payload` to set the new status value.
    setStatus: (state, action) => {
      state.status = action.payload; // Update `status` with the new value from `action.payload`.
    },

    // Define the `clearForm` reducer to reset the form state to its initial values.
    // This function clears `newTodo`, resets `status` to `false`, and sets `isEditing` and `isEditingId` to their initial values.
    clearForm: (state) => {
      state.newTodo = ""; // Clear the description of the new todo.
      state.status = false; // Reset the status to `false` (e.g., incomplete).
      state.isEditing = false; // Indicate that no todo item is being edited.
      state.isEditingId = ""; // Clear the ID of the todo being edited.
    },

    // Define the `setIsEditing` reducer to update the `isEditing` property in the state.
    // This function takes the current `state` and an `action` object with a `payload` to set the editing status.
    setIsEditing: (state, action) => {
      state.isEditing = action.payload; // Update `isEditing` with the new value from `action.payload`.
    },

    // Define the `setIsEditingId` reducer to update the `isEditingId` property in the state.
    // This function takes the current `state` and an `action` object with a `payload` to set the ID of the todo being edited.
    setIsEditingId: (state, action) => {
      state.isEditingId = action.payload; // Update `isEditingId` with the new value from `action.payload`.
    },
  },
});

// Export the action creators generated by `createSlice`.
// These actions are used to dispatch updates to the Redux state.
// `createSlice` automatically generates action creators based on the reducer names.
export const {
  setNewTodo,
  setStatus,
  clearForm,
  setIsEditing,
  setIsEditingId,
} = todoSlice.actions;

// Define and export selector functions to retrieve specific pieces of state from the Redux store.
// Selectors are used to access state values from components or other parts of the application.
// They provide a way to read specific parts of the state managed by this slice.
/*
state.todos.newTodo: This expression accesses the newTodo property within the todos slice of the state.
The newTodo property represents a specific piece of state related to the todo items, such as the current
value of a todo input field.
*/
/*
The `state` parameter represents the entire Redux state object.
`state.todos` accesses the `todos` slice of the Redux state.
`state.todos.isEditing` accesses the `isEditing` property within the `todos` slice.
*/
/* 
  initialState: {
    newTodo: "",
    status: false,
    isEditing: false,
    isEditingId: "",
  }
*/
export const selectNewTodo = (state) => state.todos.newTodo;
export const selectStatus = (state) => state.todos.status;
export const selectIsEditing = (state) => state.todos.isEditing;
export const selectIsEditingId = (state) => state.todos.isEditingId;

// Export the reducer function generated by `createSlice` as the default export.
// This reducer function is used in the Redux store to handle actions and update the state according to the defined reducers.
export default todoSlice.reducer;

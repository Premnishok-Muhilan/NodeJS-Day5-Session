// Import the `createSlice` function from `@reduxjs/toolkit`.
// This function is used to create a Redux slice, which includes the reducer and actions.
import { createSlice } from "@reduxjs/toolkit";

// Create a Redux slice named "todos" with initial state and reducers.
// A slice represents a part of the Redux state and the logic to update it.
export const todoSlice = createSlice({
  // Define the name of the slice. This name is used to generate action types and reducers.
  name: "todos",
  
  // Define the initial state for the slice.
  // This state contains properties related to todos: `newTodo`, `status`, `isEditing`, and `isEditingId`.
  initialState: {
    newTodo: "",
    status: false,
    isEditing: false,
    isEditingId: "",
  },
  
  // Define the reducers for the slice.
  // Reducers are functions that handle state updates based on actions.
  reducers: {
    // Define the `setNewTodo` reducer to update the `newTodo` property in the state.
    // It takes the current `state` and an `action` with a payload to set the new todo value.
    setNewTodo: (state, action) => {
      state.newTodo = action.payload;
    },
    
    // Define the `setStatus` reducer to update the `status` property in the state.
    // It takes the current `state` and an `action` with a payload to set the new status value.
    setStatus: (state, action) => {
      state.status = action.payload;
    },
    
    // Define the `clearForm` reducer to reset the form state to its initial values.
    // It clears `newTodo`, resets `status` to `false`, and sets `isEditing` and `isEditingId` to their initial values.
    clearForm: (state) => {
      state.newTodo = "";
      state.status = false;
      state.isEditing = false;
      state.isEditingId = "";
    },
    
    // Define the `setIsEditing` reducer to update the `isEditing` property in the state.
    // It takes the current `state` and an `action` with a payload to set the editing status.
    setIsEditing: (state, action) => {
      state.isEditing = action.payload;
    },
    
    // Define the `setIsEditingId` reducer to update the `isEditingId` property in the state.
    // It takes the current `state` and an `action` with a payload to set the ID of the todo being edited.
    setIsEditingId: (state, action) => {
      state.isEditingId = action.payload;
    },
  },
});

// Export the action creators generated by `createSlice`.
// These actions can be dispatched to update the Redux state.
export const {
  setNewTodo,
  setStatus,
  clearForm,
  setIsEditing,
  setIsEditingId,
} = todoSlice.actions;

// Define and export selector functions to retrieve specific pieces of state from the Redux store.
// These selectors are used to access values from the state in components or other parts of the application.
export const selectNewTodo = (state) => state.todos.newTodo;
export const selectStatus = (state) => state.todos.status;
export const selectIsEditing = (state) => state.todos.isEditing;
export const selectIsEditingId = (state) => state.todos.isEditingId;

// Export the reducer function generated by `createSlice`.
// This reducer will handle actions and update the state based on the defined reducers.
export default todoSlice.reducer;
